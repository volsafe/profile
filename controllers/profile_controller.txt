package controllers

import (
	"net/http"
	"strings"
	"profile/utils"
	"github.com/gin-gonic/gin"
	"log"
	"profile/db"
)

type Profile struct {
	ID                 uint    `gorm:"primaryKey"`
	UserID             uint    `gorm:"not null"`
	PhoneNumber        string  `gorm:"not null"`
	Latitude           float64 `gorm:"not null"`
	Longitude          float64 `gorm:"not null"`
	HomeSize           float64 `gorm:"not null"`
	BuildingFloors     int     `gorm:"not null"`
	FloorLivingOn      int     `gorm:"not null"`
	WindowModel        string  `gorm:"not null"`
	AdultsCount        int     `gorm:"not null"`
	ChildrenCount      int     `gorm:"not null"`
	ElectricityCompany string  `gorm:"not null"`
	MeterType          string  `gorm:"not null"`
	BillNumber         string  `gorm:"unique;not null"`
}

func CreateProfile(c *gin.Context) {
	tokenString := c.GetHeader("Authorization")
	if tokenString == "" {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Missing token"})
		return
	}

	tokenString = strings.TrimPrefix(tokenString, "Bearer ")
	userID, err := utils.ExtractUserIDFromToken(tokenString)
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid token"})
		return
	}

	type CreateProfileRequest struct {
		PhoneNumber        string  `json:"phone_number" binding:"required"`
		Latitude           float64 `json:"latitude" binding:"required"`
		Longitude          float64 `json:"longitude" binding:"required"`
		HomeSize           float64 `json:"home_size" binding:"required"`
		BuildingFloors     int     `json:"building_floors" binding:"required"`
		FloorLivingOn      int     `json:"floor_living_on" binding:"required"`
		WindowModel        string  `json:"window_model" binding:"required"`
		AdultsCount        int     `json:"adults_count" binding:"required"`
		ChildrenCount      int     `json:"children_count" binding:"required"`
		ElectricityCompany string  `json:"electricity_company" binding:"required"`
		MeterType          string  `json:"meter_type" binding:"required"`
		BillNumber         string  `json:"bill_number" binding:"required"`
	}

	var req CreateProfileRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		log.Printf("Validation error: %v", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	profile := Profile{
		UserID:             userID,
		PhoneNumber:        req.PhoneNumber,
		Latitude:           req.Latitude,
		Longitude:          req.Longitude,
		HomeSize:           req.HomeSize,
		BuildingFloors:     req.BuildingFloors,
		FloorLivingOn:      req.FloorLivingOn,
		WindowModel:        req.WindowModel,
		AdultsCount:        req.AdultsCount,
		ChildrenCount:      req.ChildrenCount,
		ElectricityCompany: req.ElectricityCompany,
		MeterType:          req.MeterType,
		BillNumber:         req.BillNumber,
	}

	// if err := db.GetConnection(&profile).Error; err != nil {
	// 	log.Printf("Database error: %v", err)
	// 	c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to create profile"})
	// 	return
	// }

	c.JSON(http.StatusCreated, gin.H{"message": "Profile created successfully"})
}

func GetUserProfile(c *gin.Context) {
	tokenString := c.GetHeader("Authorization")
	if tokenString == "" {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Missing token"})
		return
	}

	// tokenString = strings.TrimPrefix(tokenString, "Bearer ")
	// userID, err := utils.ExtractUserIDFromToken(tokenString)
	// if err != nil {
	// 	c.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid token"})
	// 	return
	// }

	// var profile Profile
	// if err := db.DB.Where("user_id = ?", userID).First(&profile).Error; err != nil {
	// 	log.Printf("Profile not found: %v", err)
	// 	c.JSON(http.StatusNotFound, gin.H{"error": "Profile not found"})
	// 	return
	// }

	c.JSON(http.StatusOK, profile)
}

func DetailedUse(c *gin.Context) ([]string, error){
	return []string{}, nil

}